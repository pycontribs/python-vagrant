name: tox

on:
  create: # is used for publishing to PyPI and TestPyPI
    tags: # any tag regardless of its name, no branches
      - "**"
  push: # only publishes pushes to the main branch to TestPyPI
    branches: # any integration branch but not tag
      - "main"
  pull_request:
  release:
    types:
      - published # It seems that you can publish directly without creating
  workflow_call:

jobs:
  tox_envs:
    name: ${{ matrix.tox_env }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os:
          - macos-10.15
        unit: ["true"]
        include:
          - tox_env: lint
            os: ubuntu-20.04
            python-version: "3.10"
            unit: false
            skip_vagrant: true
          - tox_env: packaging
            os: ubuntu-20.04
            python-version: 3.8
            unit: false
            skip_vagrant: true
          - tox_env: py38
            os: macos-10.15
            python-version: 3.8
          - tox_env: py39
            os: macos-10.15
            python-version: 3.9
          - tox_env: py310
            os: macos-10.15
            python-version: "3.10"

    env:
      TOX_PARALLEL_NO_SPINNER: 1
      TOXENV: ${{ matrix.tox_env }}
      FORCE_COLOR: 1

    steps:
      - name: Check vagrant presence
        run: |
          vagrant version
        if: ${{ ! matrix.skip_vagrant }}

      - name: Install vagrant plugins
        run: |
          # not installing due to https://github.com/dotless-de/vagrant-vbguest/issues/422:
          # vagrant plugin install vagrant-vbguest
          vagrant plugin list
        if: ${{ ! matrix.skip_vagrant }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # needed by setuptools-scm

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.tox_env }}-pip-${{ hashFiles('constraints.txt', 'setup.cfg', 'tox.ini', 'pyproject.toml', '.pre-commit-config.yaml', 'pytest.ini') }}

      - name: Install tox
        run: python3 -m pip install --upgrade tox 'coverage[toml]'

      - name: Initialize tox envs
        run: python3 -m tox --notest --skip-missing-interpreters false -vv

      - name: "tox -e ${{ matrix.tox_env }}"
        run: python3 -m tox

      - name: Upload coverage data
        uses: codecov/codecov-action@v2
        with:
          directory: .tox
          files: "coverage-*.xml"
          name: ${{ matrix.tox_env }}
          verbose: true # optional (default = false)
        if: ${{ startsWith(matrix.tox_env, 'py') }}

      - name: Archive logs
        uses: actions/upload-artifact@v2
        with:
          name: logs.zip
          path: .tox/**/log/
        # https://github.com/actions/upload-artifact/issues/123
        continue-on-error: true

      - name: Report junit failures
        uses: shyim/junit-report-annotations-action@3d2e5374f2b13e70f6f3209a21adfdbc42c466ae
        with:
          path: .tox/junit.*.xml
        if: always()

  check: # This job does nothing and is only used for the branch protection
    if: always()

    needs:
      - tox_envs

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
