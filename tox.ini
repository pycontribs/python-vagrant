[tox]
envlist =
    lint
    packaging
    py
# needed by PEP-517 projects:
isolated_build = True
minversion = 3.24.5
requires =
  # fail build if git reports dirty after test run
  tox-extra

[testenv]
deps =
  --editable .[test]
commands_pre =
  {toxinidir}/tests/tools/create_dummy_box.sh virtualbox
  {toxinidir}/tests/tools/create_dummy_box.sh libvirt
commands =
  pytest {posargs:\
    -p pytest_cov \
    --cov vagrant \
    --cov "{envsitepackagesdir}/vagrant" \
    --cov-report term-missing:skip-covered \
    --cov-report=xml:{toxworkdir}/coverage-{envname}.xml \
    --no-cov-on-fail \
  }
passenv =
    PYTHON_VAGRANT_TEST_PROVIDER
    # Pass HOME to the test environment as it is required by
    # vagrant. Otherwise error happens due to missing HOME env variable.
    HOME
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
allowlist_externals =
    sh

[testenv:dev]
commands = {posargs}

[testenv:lint]
description = Run all linters
deps =
  pre-commit>=2.6.0
skip_install = true
commands =
  {envpython} -m pre_commit run --all-files --show-diff-on-failure {posargs:}

[testenv:packaging]
description =
  Build package, verify metadata, install package and assert behavior when ansible is missing.
deps =
  build >= 0.7.0
  twine
skip_install = true
# Ref: https://twitter.com/di_codes/status/1044358639081975813
commands =
  # Safety measure to remove library if somehow appears as installed
  sh -c "pip uninstall -y python-vagrant 2>/dev/null"
  # build wheel and sdist using PEP-517
  {envpython} -c 'import os.path, shutil, sys; \
  dist_dir = os.path.join("{toxinidir}", "dist"); \
  os.path.isdir(dist_dir) or sys.exit(0); \
  print("Removing \{!s\} contents...".format(dist_dir), file=sys.stderr); \
  shutil.rmtree(dist_dir)'
  {envpython} -m build \
    --outdir {toxinidir}/dist/ \
    {toxinidir}
  # Validate metadata using twine
  twine check --strict {toxinidir}/dist/*
  # Install the wheel
  sh -c "python3 -m pip install {toxinidir}/dist/*.whl"
  # Basic checks
  python -c "import sys, pkgutil; sys.exit(0 if pkgutil.find_loader(sys.argv[1]) else 1)" vagrant
  # Uninstall the wheel
  pip uninstall -y python-vagrant
